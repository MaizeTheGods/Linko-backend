// Este es tu archivo de esquema de Prisma.
// Define los modelos de tu base de datos, que Prisma convertirá en tablas.

// Configuración del cliente de Prisma (cómo se conecta tu código a la DB)
generator client {
  provider = "prisma-client-js"
}

// --- Modelo para Bloqueos de Usuario ---
model Bloqueo {
  id_bloqueador  Int
  id_bloqueado   Int
  fecha_creacion DateTime @default(now())

  bloqueador Usuario @relation("Bloqueador", fields: [id_bloqueador], references: [id_usuario], onDelete: Cascade)
  bloqueado  Usuario @relation("Bloqueado",  fields: [id_bloqueado],  references: [id_usuario], onDelete: Cascade)

  @@id([id_bloqueador, id_bloqueado])
}

// --- Modelo de etiquetas de usuarios en publicaciones ---
model PublicacionEtiqueta {
  id_publicacion        Int
  id_usuario_etiquetado Int
  fecha_creacion        DateTime @default(now())

  publicacion        Publicacion @relation(fields: [id_publicacion], references: [id_publicacion], onDelete: Cascade)
  usuario_etiquetado Usuario     @relation("UsuarioEtiquetado", fields: [id_usuario_etiquetado], references: [id_usuario], onDelete: Cascade)

  @@id([id_publicacion, id_usuario_etiquetado])
}

// --- Modelos para Encuestas (Polls) ---
model Encuesta {
  id_encuesta    Int      @id @default(autoincrement())
  pregunta       String
  fecha_creacion DateTime @default(now())

  // 1-1 con Publicacion
  id_publicacion Int         @unique
  publicacion    Publicacion @relation(fields: [id_publicacion], references: [id_publicacion], onDelete: Cascade)

  opciones OpcionEncuesta[]
  votos    VotoEncuesta[]
}

model OpcionEncuesta {
  id_opcion   Int    @id @default(autoincrement())
  id_encuesta Int
  texto       String
  orden       Int    @default(0)

  encuesta Encuesta       @relation(fields: [id_encuesta], references: [id_encuesta], onDelete: Cascade)
  votos    VotoEncuesta[]
}

model VotoEncuesta {
  id_encuesta    Int
  id_usuario     Int
  id_opcion      Int
  fecha_creacion DateTime @default(now())

  encuesta Encuesta       @relation(fields: [id_encuesta], references: [id_encuesta], onDelete: Cascade)
  usuario  Usuario        @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  opcion   OpcionEncuesta @relation(fields: [id_opcion], references: [id_opcion], onDelete: Cascade)

  // Un usuario solo puede tener un voto por encuesta (se puede actualizar la opción)
  @@id([id_encuesta, id_usuario])
}

// Configuración de la fuente de datos (tu base de datos PostgreSQL)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Esta URL se carga desde tu archivo .env
}

// ===============================================
// MODELOS DE LA BASE DE DATOS
// ===============================================

// --- Modelo para los Usuarios ---
model Usuario {
  id_usuario                 Int       @id @default(autoincrement())
  correo_electronico         String    @unique
  nombre_usuario             String    @unique
  nombre_perfil              String
  contrasena                 String // Se guardará siempre hasheada (encriptada)
  biografia                  String? // El '?' significa que este campo es opcional
  foto_perfil_url            String?
  foto_portada_url           String?
  perfil_privado             Boolean   @default(false)
  correo_pendiente           String?
  token_cambio_correo        String?
  token_cambio_correo_expira DateTime?
  fecha_creacion             DateTime  @default(now())

  // --- Relaciones de Usuario ---
  // Un usuario puede tener muchas...
  publicaciones        Publicacion[]
  comentarios          Comentario[]
  me_gusta             MeGusta[]
  me_gusta_comentarios MeGustaComentario[]
  guardados            Guardado[]
  // Votos en encuestas (relación con VotoEncuesta)
  votos_encuestas      VotoEncuesta[]
  // Usuarios etiquetados en publicaciones (relación inversa)
  etiquetas_recibidas  PublicacionEtiqueta[] @relation("UsuarioEtiquetado")

  // Relación de seguimiento (un usuario sigue a muchos y es seguido por muchos)
  // 'seguidores' es la lista de registros donde este usuario es el 'seguido'
  seguidores Seguidor[] @relation("Seguido")
  // 'seguidos' es la lista de registros donde este usuario es el 'seguidor'
  seguidos   Seguidor[] @relation("Seguidor")

  // Mensajes privados (DMs)
  mensajes_enviados  Mensaje[]
  conversaciones1    Conversacion[] @relation("ConversacionUsuario1")
  conversaciones2    Conversacion[] @relation("ConversacionUsuario2")

  // Bloqueos de usuario (para DMs y privacidad)
  bloqueos_hechos    Bloqueo[]       @relation("Bloqueador")
  bloqueos_recibidos Bloqueo[]       @relation("Bloqueado")
}

// --- Modelo para las Publicaciones (Posts) ---
model Publicacion {
  id_publicacion  Int      @id @default(autoincrement())
  texto_contenido String?
  fecha_creacion  DateTime @default(now())

  // Clave foránea para conectar con el autor
  id_usuario Int

  // --- Relaciones de Publicacion ---
  // Una publicación pertenece a un usuario
  usuario     Usuario               @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  // Una publicación puede tener muchos...
  archivos    ArchivoPublicacion[]
  comentarios Comentario[]
  me_gusta    MeGusta[]
  guardados   Guardado[]
  // Etiquetas de usuarios en esta publicación
  etiquetas   PublicacionEtiqueta[]
  // Encuesta asociada (opcional)
  encuesta    Encuesta?
}

// --- Modelo para los archivos de una publicación (imágenes, videos) ---
model ArchivoPublicacion {
  id_archivo   Int    @id @default(autoincrement())
  url_archivo  String
  tipo_archivo String // Ej: "IMAGEN" o "VIDEO"
  orden        Int    @default(0) // Para carruseles de imágenes

  // Clave foránea para conectar con la publicación
  id_publicacion Int

  // --- Relación ---
  publicacion Publicacion @relation(fields: [id_publicacion], references: [id_publicacion], onDelete: Cascade)
}

// --- Modelo para los Comentarios ---
model Comentario {
  id_comentario    Int      @id @default(autoincrement())
  texto_comentario String
  fecha_creacion   DateTime @default(now())

  // Claves foráneas
  id_usuario     Int
  id_publicacion Int

  // Para comentarios anidados (respuestas a otros comentarios)
  id_comentario_padre Int?

  // --- Relaciones de Comentario ---
  usuario     Usuario             @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  publicacion Publicacion         @relation(fields: [id_publicacion], references: [id_publicacion], onDelete: Cascade)
  me_gusta    MeGustaComentario[]

  // Relación de auto-referencia para los comentarios anidados
  comentario_padre Comentario?  @relation("Respuestas", fields: [id_comentario_padre], references: [id_comentario], onDelete: NoAction, onUpdate: NoAction)
  respuestas       Comentario[] @relation("Respuestas")
}

// --- Modelo para los "Me Gusta" (Likes) ---
model MeGusta {
  fecha_creacion DateTime @default(now())

  // Claves foráneas compuestas
  id_usuario     Int
  id_publicacion Int

  // --- Relaciones ---
  usuario     Usuario     @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  publicacion Publicacion @relation(fields: [id_publicacion], references: [id_publicacion], onDelete: Cascade)

  // Definimos una clave primaria compuesta
  @@id([id_usuario, id_publicacion])
}

// --- Modelo para los "Me Gusta" en Comentarios ---
model MeGustaComentario {
  fecha_creacion DateTime @default(now())

  // Claves foráneas compuestas
  id_usuario    Int
  id_comentario Int

  // --- Relaciones ---
  usuario    Usuario    @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  comentario Comentario @relation(fields: [id_comentario], references: [id_comentario], onDelete: Cascade)

  // Un usuario solo puede dar me gusta una vez a un mismo comentario
  @@id([id_usuario, id_comentario])
}

// --- Modelo para Publicaciones Guardadas ---
model Guardado {
  fecha_creacion DateTime @default(now())

  // Claves foráneas compuestas
  id_usuario     Int
  id_publicacion Int

  // --- Relaciones ---
  usuario     Usuario     @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  publicacion Publicacion @relation(fields: [id_publicacion], references: [id_publicacion], onDelete: Cascade)

  // Un usuario solo puede guardar una vez una misma publicación
  @@id([id_usuario, id_publicacion])
}

// --- Modelos para Mensajes Privados (DMs) ---
model Conversacion {
  id_conversacion  Int      @id @default(autoincrement())
  id_usuario1      Int
  id_usuario2      Int
  fecha_creacion   DateTime @default(now())
  ultima_actividad DateTime @default(now())

  usuario1 Usuario @relation("ConversacionUsuario1", fields: [id_usuario1], references: [id_usuario], onDelete: Cascade)
  usuario2 Usuario @relation("ConversacionUsuario2", fields: [id_usuario2], references: [id_usuario], onDelete: Cascade)
  mensajes Mensaje[]

  // Evitar duplicados (se guarda con orden canónico: min(user1,user2), max(user1,user2))
  @@unique([id_usuario1, id_usuario2])
}

model Mensaje {
  id_mensaje      Int      @id @default(autoincrement())
  id_conversacion Int
  id_remitente    Int
  contenido       String
  fecha_creacion  DateTime @default(now())
  leido           Boolean  @default(false)

  conversacion Conversacion @relation(fields: [id_conversacion], references: [id_conversacion], onDelete: Cascade)
  remitente    Usuario      @relation(fields: [id_remitente], references: [id_usuario], onDelete: Cascade)
}

// --- Enum para estado de seguimiento (solicitudes) ---
enum FollowStatus {
  PENDIENTE
  ACEPTADO
}

// --- Modelo para la relación de Seguidores (Follows) ---
// Esta es una tabla de unión (join table) para la relación muchos-a-muchos entre usuarios.
model Seguidor {
  // Claves foráneas que forman una clave primaria compuesta
  id_seguidor Int // El que sigue
  id_seguido  Int // El que es seguido
  estado      FollowStatus @default(ACEPTADO)

  // --- Relaciones ---
  seguidor Usuario @relation("Seguidor", fields: [id_seguidor], references: [id_usuario], onDelete: Cascade)
  seguido  Usuario @relation("Seguido", fields: [id_seguido], references: [id_usuario], onDelete: Cascade)

  // Un usuario no puede seguir a la misma persona dos veces
  @@id([id_seguidor, id_seguido])
}
