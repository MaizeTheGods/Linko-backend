// 1. Configure MongoDB as database provider
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// 2. Add your models here
model User {
  id                     String          @id @default(auto()) @map("_id") @db.ObjectId
  username               String          @unique
  email                  String          @unique
  password               String
  avatar                 String?
  role                   String          @default("USER")
  posts                  Post[]
  comments               Comment[]
  sentMessages           DMMessage[]     @relation("SentMessages")
  receivedMessages       DMMessage[]     @relation("ReceivedMessages")
  conversationIds        String[]        @db.ObjectId
  conversations          DMConversation[] @relation(fields: [conversationIds], references: [id])
  sentNotifications      Notification[]  @relation("sender")
  receivedNotifications  Notification[]  @relation("receiver")
  following              Follows[]       @relation("Following")
  followers              Follows[]       @relation("Followers")
  followRequestsSent     FollowRequest[] @relation("Follower")
  followRequestsReceived FollowRequest[] @relation("Followee")
  bio                    String?
  website                String?
  location               String?
  isVerified             Boolean         @default(false)
  followersCount         Int             @default(0)
  followingCount         Int             @default(0)
  postCount              Int             @default(0)
  savedPosts             SavedPost[] // Corregido
  hiddenPosts            HiddenPost[] // Corregido
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
}

model Post {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  content       String
  image         String?
  author        User           @relation(fields: [authorId], references: [id])
  authorId      String         @db.ObjectId
  comments      Comment[]
  likes         String[]       @db.ObjectId
  tags          String[]
  visibility    String         @default("PUBLIC")
  isPinned      Boolean        @default(false)
  isArchived    Boolean        @default(false)
  savedBy       SavedPost[] // Corregido
  hiddenBy      HiddenPost[] // Corregido
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Comment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  author          User     @relation(fields: [authorId], references: [id])
  authorId        String   @db.ObjectId
  post            Post     @relation(fields: [postId], references: [id])
  postId          String   @db.ObjectId
  parentComment   Comment? @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Corregido
  parentCommentId String?  @db.ObjectId
  replies         Comment[] @relation("CommentReplies")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model DMConversation {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  participantIds String[]    @db.ObjectId
  participants   User[]      @relation(fields: [participantIds], references: [id])
  messages       DMMessage[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model DMMessage {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  sender         User           @relation("SentMessages", fields: [senderId], references: [id])
  senderId       String         @db.ObjectId
  receiver       User           @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId     String         @db.ObjectId
  conversation   DMConversation @relation(fields: [conversationId], references: [id])
  conversationId String         @db.ObjectId
  read           Boolean        @default(false)
  createdAt      DateTime       @default(now())
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  type       String
  sender     User?    @relation("sender", fields: [senderId], references: [id])
  senderId   String?  @db.ObjectId
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  receiverId String   @db.ObjectId
  post       Post?    @relation(fields: [postId], references: [id])
  postId     String?  @db.ObjectId
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model FollowRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  follower   User     @relation("Follower", fields: [followerId], references: [id])
  followerId String   @db.ObjectId
  followee   User     @relation("Followee", fields: [followeeId], references: [id])
  followeeId String   @db.ObjectId
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
}

model Follows {
  id          String @id @default(auto()) @map("_id") @db.ObjectId // Corregido
  followerId  String @db.ObjectId
  followingId String @db.ObjectId
  follower    User   @relation("Following", fields: [followerId], references: [id])
  following   User   @relation("Followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId]) // Corregido
}

// NUEVO MODELO PARA POSTS GUARDADOS
model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

// NUEVO MODELO PARA POSTS OCULTOS
model HiddenPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}